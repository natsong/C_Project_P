#include <stdio.h>

int main()
{
  char a=-1;
  unsigned b=-1;
  printf("a=%d\n",a);
  printf("b=%d\n",b);
  printf("a=%u\n",a);
  printf("b=%u\n",b);
return 0;
}

//输出结果为
a=-1
b=255
a=4294967295
b=255

//结果分析

一、提升规则
数据的提升：
（1） 首先是左添0 还是左添1，要看最初是用什么类型的变量来存储数据，例如用char来存储a 的时候，则表示a是作为有符号数来提升的：若为有符号正数则左添0，若为有符号负数则左添1
（2） 提升到多少位则需要看是要以什么格式输出，例如 以%d格式输出则提升到32bit ,以%f 格式输出则提升到64bit

二、结果分析

char a=-1, -1
原码：10000000000000000000000000000001
反码：11111111111111111111111111111110 （原码基础上符号位不变，数值位按位取反）
补码：11111111111111111111111111111111 （反码基础上+1）
由于存入的是char类型变量故 截断存低位1字节8bit 11111111
11111111  提升：
由于用char 类型存储，因而是作为有符号负数提升应左添1，且作为%d格式输出，故提升至32bit  11111111->11111111111111111111111111111111 (提升完毕)

unsigned char b=-1, -1
原码：10000000000000000000000000000001
反码：11111111111111111111111111111110 （原码基础上符号位不变，数值位按位取反）
补码：11111111111111111111111111111111 （反码基础上+1）
由于存入的是 unsigned char类型变量故 截断存低位1字节8bit 11111111   (Notes：有符号和无符号在内存中所占的内存位数是相同的，也就导致表示范围不同)
11111111  提升：

由于用 usigned char 类型存储，因而是作为无符号整数提升，应左添0，且作为%d格式输出，故提升至32bit 11111111->00000000000000000000000011111111 (提升完毕)



