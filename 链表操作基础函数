#include <stdio.h>
#include <stdlib.h>

//定义链表结构体类型
typedef struct LNode
{
	int data;
	struct LNode* next;
}LNode,*LinkList;

//typedef 关键字将自定义类型 struct LNode 起别名 LNode。
//将自定义类型 struct LNode* 起别名LinkList

//接下来是一些链表初始化，建表，插入，删除，查表，求表长等基础操作函数的实现

//初始化链表LinkList()
LinkList Init_LinkList()
{
	LinkList ll=(LNode*)malloc(sizeof(LNode));
	ll->next=NULL;
	return ll;
}
//建表，一般有头插法，尾插法建表，具体用哪个看需求

//头插法建表,所建表与输入相逆，输入 1,2,3 链表顺序 3,2,1
LinkList Creat_LinkList_HeadInsert()
{
	LNode* s=NULL;//s用于标记插入结点
	int x=0;
	LinkList L=Init_LinkList();//初始化链表

	scanf("%d",&x);

	while(x!=-1)
	{
		s=(LNode*)malloc(sizeof(LNode));
		if(L->next=NULL)
		{
			s->data=x;
			s->next=NULL;
		}
		else
		{
			s->data=x;
			s->next=L->next;
			L->next=s;
		}
		scanf("%d",&x);
	}

	return L;
}

///尾插法建表,所建表与输入相同，输入 1,2,3 链表顺序 1,2,3
LinkList Creat_LinkList_TailInsert()
{
	LNode* s=NULL;//s用于标记插入结点
	int x=0;
	LinkList L=Init_LinkList();
	LNode* rear=L;//建立尾指针指向链表最后一个元素
	scanf("%d",&x);
	while(x!=-1)
	{
		s=(LNode*)malloc(sizeof(LNode));
		s->data=x;
		rear->next=s;
		rear=s;
		scanf("%d",&x);
	}
	rear->next=NULL;
	return L;

}
//删除表中指定data值的结点

void Delete_LinkList_Bydata(LinkList L,int x)  
{
	
}

	
int main()
{
	
	//LinkList L=Creat_LinkList_HeadInsert();
	
	LinkList L=Creat_LinkList_TailInsert();
	LNode* p=L->next;

	Delete_LinkList_Bydata(L,3);

	
	return 0;
}
